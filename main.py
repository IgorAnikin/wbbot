import os
import time
import uuid
import httpx

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Update,
)

# --------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

SUPABASE_URL    = os.getenv("SUPABASE_URL", "")
SUPABASE_KEY    = os.getenv("SUPABASE_KEY", "")
SUPABASE_BUCKET = os.getenv("SUPABASE_BUCKET", "wb-photos")

# --------- TG ----------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
router = Router()

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∏ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üì∑ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è (12 —Å–Ω–∏–º–∫–æ–≤)")],
        [KeyboardButton(text="üí¨ –§–µ–π–∫-–æ—Ç–∑—ã–≤")],
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start_cmd(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

@router.message(F.text == "üì∏ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ")
async def main_photo(msg: Message):
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, —è —Å–¥–µ–ª–∞—é –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ.")

@router.message(F.text == "üì∑ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è (12 —Å–Ω–∏–º–∫–æ–≤)")
async def photoset(msg: Message):
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, —è —Å–æ–±–µ—Ä—É —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é –∏–∑ 12 —Å–Ω–∏–º–∫–æ–≤.")

@router.message(F.text == "üí¨ –§–µ–π–∫-–æ—Ç–∑—ã–≤")
async def fake_review(msg: Message):
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–∑—ã–≤.")

def _public_url(object_path: str) -> str:
    # –î–ª—è public-–±–∞–∫–µ—Ç–∞ Supabase –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ç–∞–∫:
    return f"{SUPABASE_URL}/storage/v1/object/public/{SUPABASE_BUCKET}/{object_path}"

async def upload_to_supabase(file_bytes: bytes, suffix: str = ".jpg") -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É."""
    if not (SUPABASE_URL and SUPABASE_KEY and SUPABASE_BUCKET):
        raise RuntimeError("Supabase env vars missing (SUPABASE_URL/KEY/BUCKET)")
    filename = f"{int(time.time())}-{uuid.uuid4().hex}{suffix}"
    object_path = f"uploads/{filename}"
    url = f"{SUPABASE_URL}/storage/v1/object/{SUPABASE_BUCKET}/{object_path}"
    headers = {
        "Authorization": f"Bearer {SUPABASE_KEY}",
        "Content-Type": "image/jpeg",
        "x-upsert": "true",
    }
    async with httpx.AsyncClient(timeout=60) as client:
        r = await client.post(url, headers=headers, content=file_bytes)
        r.raise_for_status()
    return _public_url(object_path)

@router.message(F.photo)
async def on_photo(msg: Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ ‚Üí –≥—Ä—É–∑–∏–º –≤ Supabase ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É."""
    try:
        await msg.answer("üì• –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –≤ –æ–±–ª–∞–∫–æ‚Ä¶")
        ph = msg.photo[-1]  # —Å–∞–º–æ–µ –∫—Ä—É–ø–Ω–æ–µ –ø—Ä–µ–≤—å—é
        tg_file = await bot.get_file(ph.file_id)
        file_stream = await bot.download_file(tg_file.file_path)
        img_bytes = file_stream.read()

        public_link = await upload_to_supabase(img_bytes, suffix=".jpg")
        await msg.answer(f"‚úÖ –ó–∞–ª–∏–ª. –°—Å—ã–ª–∫–∞: {public_link}")
        # –î–∞–ª—å—à–µ —Ç—É—Ç –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫–∞—Ä—Ç–∏–Ω–∫–∏/—Ç–µ–∫—Å—Ç) ‚Äî –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º.
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

dp.include_router(router)

# --------- FastAPI ----------
app = FastAPI()

@app.get("/")
async def root():
    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "healthy"}

@app.post("/webhook")
async def tg_webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

