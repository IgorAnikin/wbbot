import os
import time
import uuid
import httpx

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Update

# ---------- ENV (–≤ Railway —É–∂–µ –µ—Å—Ç—å) ----------
BOT_TOKEN       = os.getenv("BOT_TOKEN", "")
SUPABASE_URL    = os.getenv("SUPABASE_URL", "")
SUPABASE_KEY    = os.getenv("SUPABASE_KEY", "")
SUPABASE_BUCKET = os.getenv("SUPABASE_BUCKET", "wb-photos")
FAL_KEY         = os.getenv("FAL_KEY", "")  # <- –î–û–ë–ê–í–¨ –≤ Railway

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not (SUPABASE_URL and SUPABASE_KEY and SUPABASE_BUCKET):
    raise RuntimeError("Supabase env vars missing")
if not FAL_KEY:
    raise RuntimeError("FAL_KEY is not set")

# ---------- TG ----------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
router = Router()

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∏ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üì∑ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è (12 —Å–Ω–∏–º–∫–æ–≤)")],
        [KeyboardButton(text="üí¨ –§–µ–π–∫-–æ—Ç–∑—ã–≤")],
    ],
    resize_keyboard=True
)

# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–ø—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –Ω–∞ —á–∞—Ç)
MODE_BY_CHAT = {}  # chat_id -> "main" | "set" | "review"

@router.message(Command("start"))
async def start_cmd(msg: Message):
    MODE_BY_CHAT[msg.chat.id] = None
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

@router.message(F.text == "üì∏ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ")
async def main_photo(msg: Message):
    MODE_BY_CHAT[msg.chat.id] = "main"
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî —Å–¥–µ–ª–∞—é –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (3:4, —Å—Ç—É–¥–∏–π–Ω—ã–π —Å—Ç–∏–ª—å).")

@router.message(F.text == "üì∑ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è (12 —Å–Ω–∏–º–∫–æ–≤)")
async def photoset(msg: Message):
    MODE_BY_CHAT[msg.chat.id] = "set"
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî —Å–æ–±–µ—Ä—É —Å–µ—Ä–∏—é –∏–∑ 12 —Å–Ω–∏–º–∫–æ–≤ –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ.")

@router.message(F.text == "üí¨ –§–µ–π–∫-–æ—Ç–∑—ã–≤")
async def fake_review(msg: Message):
    MODE_BY_CHAT[msg.chat.id] = "review"
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (—Å–µ–π—á–∞—Å –≤–µ—Ä–Ω—É —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É).")

# ---------- Supabase ----------
def _public_url(object_path: str) -> str:
    return f"{SUPABASE_URL}/storage/v1/object/public/{SUPABASE_BUCKET}/{object_path}"

async def upload_to_supabase(file_bytes: bytes, suffix: str = ".jpg") -> str:
    filename = f"{int(time.time())}-{uuid.uuid4().hex}{suffix}"
    object_path = f"uploads/{filename}"
    url = f"{SUPABASE_URL}/storage/v1/object/{SUPABASE_BUCKET}/{object_path}"
    headers = {
        "Authorization": f"Bearer {SUPABASE_KEY}",
        "apikey": SUPABASE_KEY,
        "Content-Type": "application/octet-stream",
        "x-upsert": "true",
    }
    async with httpx.AsyncClient(timeout=60) as client:
        r = await client.post(url, headers=headers, content=file_bytes)
        r.raise_for_status()
    return _public_url(object_path)

# ---------- Fal.ai ----------
async def fal_generate(image_url: str, mode: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç img2img —á–µ—Ä–µ–∑ Fal.ai –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏.
    –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π endpoint flux-pro (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤).
    """
    # –ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ–º–ø—Ç—ã –ø–æ–¥ –∫–Ω–æ–ø–∫–∏
    if mode == "main":
        prompt = (
            "photorealistic ecommerce hero shot, mobile-photography aesthetic, soft daylight, "
            "clean minimalist warm bedroom, mirror selfie framing optional, focus on garment details, "
            "3:4 aspect ratio, high resolution, no watermark, no logos, realistic skin"
        )
        num_images = 1
    elif mode == "set":
        prompt = (
            "photorealistic lifestyle photoshoot for fashion e-commerce, consistent style and lighting, "
            "mix of full-body, 3/4, side, back, close-up fabric, minimal interior, soft shadow, "
            "3:4 aspect ratio, high resolution, no watermark, no logos"
        )
        num_images = 12
    else:  # "review" ‚Äî –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º –æ–¥–∏–Ω –∫–∞–¥—Ä-–∑–∞–≥–ª—É—à–∫—É –ø–æ–¥ –æ—Ç–∑—ã–≤
        prompt = (
            "clean studio-like product modeling photo for marketplace, 3:4 aspect ratio, high resolution, "
            "no watermark, no logos"
        )
        num_images = 1

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ¬´–±–µ—Ä–µ–∂–Ω–æ–≥–æ¬ª img2img (–¥–µ—Ä–∂–∏–º —Ç–∫–∞–Ω—å –∏ –ø–æ—Å–∞–¥–∫—É)
    payload = {
        "image_url": image_url,          # –Ω–∞—à–∞ —Ä–µ—Ñ-–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ Supabase (–ø—É–±–ª–∏—á–Ω–∞—è)
        "prompt": prompt,
        "num_images": num_images,
        # –ù–∏–∂–µ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º flux/SDXL-compatible —Ä–æ—É—Ç–æ–≤ –Ω–∞ Fal.
        "guidance_scale": 4.0,
        "strength": 0.45,                # –Ω–∏–∑–∫–∏–π denoise, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∫–∞–Ω—å
        "image_size": "3072x4096",       # 3:4
        "negative_prompt": "watermark, text, logo, extra fingers, plastic skin, hdr glow, oversmooth"
    }

    headers = {
        "Authorization": f"Key {FAL_KEY}",
        "Content-Type": "application/json"
    }

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (blocking) –≤—ã–∑–æ–≤ ‚Äî Fal –≤–µ—Ä–Ω—ë—Ç –∏—Ç–æ–≥ —Å—Ä–∞–∑—É.
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π Fal –ø—Ä–æ—Å–∏—Ç –¥—Ä—É–≥–æ–µ –∏–º—è —Ä–æ—É—Ç–µ—Ä–∞.
    # –≠—Ç–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—â–∏–π img2img –Ω–∞ –±–∞–∑–µ Flux.
    fal_url = "https://fal.run/fal-ai/flux-pro-img2img"

    async with httpx.AsyncClient(timeout=300) as client:
        resp = await client.post(fal_url, headers=headers, json=payload)
        resp.raise_for_status()
        data = resp.json()

    # –û–∂–∏–¥–∞–µ–º –ø–æ–ª–µ images -> [ { url: ... } ]
    images = data.get("images") or []
    if not images:
        raise RuntimeError(f"Fal response has no images: {data}")
    # –ï—Å–ª–∏ 12 —Å–Ω–∏–º–∫–æ–≤ ‚Äî –≤–µ—Ä–Ω—ë–º –ø–µ—Ä–≤—ã–π url (–Ω–∏–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ)
    return [img["url"] for img in images]

# ---------- –§–æ—Ç–æ-—Ö–µ–Ω–¥–ª–µ—Ä ----------
@router.message(F.photo)
async def on_photo(msg: Message):
    try:
        mode = MODE_BY_CHAT.get(msg.chat.id) or "main"
        await msg.answer("üì• –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –≤ –æ–±–ª–∞–∫–æ‚Ä¶")
        # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
        ph = msg.photo[-1]
        tg_file = await bot.get_file(ph.file_id)
        file_stream = await bot.download_file(tg_file.file_path)
        img_bytes = file_stream.read()

        # 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫ –≤ Supabase –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        src_url = await upload_to_supabase(img_bytes, suffix=".jpg")
        await msg.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Fal.ai‚Ä¶")

        # 2) –≥–µ–Ω–µ—Ä–∏–º
        gen_urls = await fal_generate(src_url, mode=mode)

        # 3) –æ—Ç–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç(—ã)
        if mode == "set" and len(gen_urls) > 1:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ 12 —Å–Ω–∏–º–∫–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ Supabase –∏ —à–ª—ë–º —Å—Å—ã–ª–∫–∏
            links = []
            async with httpx.AsyncClient(timeout=120) as client:
                for u in gen_urls:
                    content = (await client.get(u)).content
                    out_url = await upload_to_supabase(content, suffix=".jpg")
                    links.append(out_url)
            text = "‚úÖ –ì–æ—Ç–æ–≤–æ. 12 —Å–Ω–∏–º–∫–æ–≤:\n" + "\n".join(links)
            await msg.answer(text)
        else:
            # –û–¥–∏–Ω –∫–∞–¥—Ä
            async with httpx.AsyncClient(timeout=120) as client:
                content = (await client.get(gen_urls[0])).content
            out_url = await upload_to_supabase(content, suffix=".jpg")
            await msg.answer_photo(photo=out_url, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ. –°—Å—ã–ª–∫–∞: {out_url}")

    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

dp.include_router(router)

# ---------- FastAPI (–≤–µ–±—Ö—É–∫) ----------
app = FastAPI()

@app.get("/")
async def root():
    return {"ok": True}

@app.post("/webhook")
async def tg_webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

